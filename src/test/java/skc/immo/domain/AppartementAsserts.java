package skc.immo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppartementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppartementAllPropertiesEquals(Appartement expected, Appartement actual) {
        assertAppartementAutoGeneratedPropertiesEquals(expected, actual);
        assertAppartementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppartementAllUpdatablePropertiesEquals(Appartement expected, Appartement actual) {
        assertAppartementUpdatableFieldsEquals(expected, actual);
        assertAppartementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppartementAutoGeneratedPropertiesEquals(Appartement expected, Appartement actual) {
        assertThat(actual)
            .as("Verify Appartement auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppartementUpdatableFieldsEquals(Appartement expected, Appartement actual) {
        assertThat(actual)
            .as("Verify Appartement relevant properties")
            .satisfies(a -> assertThat(a.getIdapp()).as("check idapp").isEqualTo(expected.getIdapp()))
            .satisfies(a -> assertThat(a.getLibelle()).as("check libelle").isEqualTo(expected.getLibelle()))
            .satisfies(a -> assertThat(a.getLoyer()).as("check loyer").isEqualTo(expected.getLoyer()))
            .satisfies(a -> assertThat(a.getNbrepieces()).as("check nbrepieces").isEqualTo(expected.getNbrepieces()))
            .satisfies(a -> assertThat(a.getTaux()).as("check taux").isEqualTo(expected.getTaux()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppartementUpdatableRelationshipsEquals(Appartement expected, Appartement actual) {
        assertThat(actual)
            .as("Verify Appartement relationships")
            .satisfies(a -> assertThat(a.getResidence()).as("check residence").isEqualTo(expected.getResidence()));
    }
}
