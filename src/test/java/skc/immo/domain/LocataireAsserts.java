package skc.immo.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static skc.immo.domain.AssertUtils.zonedDataTimeSameInstant;

public class LocataireAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocataireAllPropertiesEquals(Locataire expected, Locataire actual) {
        assertLocataireAutoGeneratedPropertiesEquals(expected, actual);
        assertLocataireAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocataireAllUpdatablePropertiesEquals(Locataire expected, Locataire actual) {
        assertLocataireUpdatableFieldsEquals(expected, actual);
        assertLocataireUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocataireAutoGeneratedPropertiesEquals(Locataire expected, Locataire actual) {
        assertThat(actual)
            .as("Verify Locataire auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocataireUpdatableFieldsEquals(Locataire expected, Locataire actual) {
        assertThat(actual)
            .as("Verify Locataire relevant properties")
            .satisfies(a -> assertThat(a.getIdloc()).as("check idloc").isEqualTo(expected.getIdloc()))
            .satisfies(a -> assertThat(a.getArriere()).as("check arriere").isEqualTo(expected.getArriere()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getDate())
            )
            .satisfies(a ->
                assertThat(a.getDatedepart())
                    .as("check datedepart")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getDatedepart())
            )
            .satisfies(a -> assertThat(a.getFonction()).as("check fonction").isEqualTo(expected.getFonction()))
            .satisfies(a -> assertThat(a.getLoyer()).as("check loyer").isEqualTo(expected.getLoyer()))
            .satisfies(a -> assertThat(a.getMotifdepart()).as("check motifdepart").isEqualTo(expected.getMotifdepart()))
            .satisfies(a -> assertThat(a.getNationalite()).as("check nationalite").isEqualTo(expected.getNationalite()))
            .satisfies(a -> assertThat(a.getNom()).as("check nom").isEqualTo(expected.getNom()))
            .satisfies(a -> assertThat(a.getNumpiece()).as("check numpiece").isEqualTo(expected.getNumpiece()))
            .satisfies(a -> assertThat(a.getObservation()).as("check observation").isEqualTo(expected.getObservation()))
            .satisfies(a -> assertThat(a.getStatut()).as("check statut").isEqualTo(expected.getStatut()))
            .satisfies(a -> assertThat(a.getTelephone()).as("check telephone").isEqualTo(expected.getTelephone()))
            .satisfies(a -> assertThat(a.getTypepiece()).as("check typepiece").isEqualTo(expected.getTypepiece()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocataireUpdatableRelationshipsEquals(Locataire expected, Locataire actual) {
        assertThat(actual)
            .as("Verify Locataire relationships")
            .satisfies(a -> assertThat(a.getAppartement()).as("check appartement").isEqualTo(expected.getAppartement()));
    }
}
