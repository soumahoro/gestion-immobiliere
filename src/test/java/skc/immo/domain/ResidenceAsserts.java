package skc.immo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ResidenceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResidenceAllPropertiesEquals(Residence expected, Residence actual) {
        assertResidenceAutoGeneratedPropertiesEquals(expected, actual);
        assertResidenceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResidenceAllUpdatablePropertiesEquals(Residence expected, Residence actual) {
        assertResidenceUpdatableFieldsEquals(expected, actual);
        assertResidenceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResidenceAutoGeneratedPropertiesEquals(Residence expected, Residence actual) {
        assertThat(actual)
            .as("Verify Residence auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResidenceUpdatableFieldsEquals(Residence expected, Residence actual) {
        assertThat(actual)
            .as("Verify Residence relevant properties")
            .satisfies(a -> assertThat(a.getIdres()).as("check idres").isEqualTo(expected.getIdres()))
            .satisfies(a -> assertThat(a.getIlot()).as("check ilot").isEqualTo(expected.getIlot()))
            .satisfies(a -> assertThat(a.getLocalisation()).as("check localisation").isEqualTo(expected.getLocalisation()))
            .satisfies(a -> assertThat(a.getObservation()).as("check observation").isEqualTo(expected.getObservation()))
            .satisfies(a -> assertThat(a.getQuartier()).as("check quartier").isEqualTo(expected.getQuartier()))
            .satisfies(a -> assertThat(a.getVille()).as("check ville").isEqualTo(expected.getVille()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResidenceUpdatableRelationshipsEquals(Residence expected, Residence actual) {
        assertThat(actual)
            .as("Verify Residence relationships")
            .satisfies(a -> assertThat(a.getProprietaire()).as("check proprietaire").isEqualTo(expected.getProprietaire()));
    }
}
