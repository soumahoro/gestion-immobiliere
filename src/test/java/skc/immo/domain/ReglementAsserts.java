package skc.immo.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static skc.immo.domain.AssertUtils.zonedDataTimeSameInstant;

public class ReglementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReglementAllPropertiesEquals(Reglement expected, Reglement actual) {
        assertReglementAutoGeneratedPropertiesEquals(expected, actual);
        assertReglementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReglementAllUpdatablePropertiesEquals(Reglement expected, Reglement actual) {
        assertReglementUpdatableFieldsEquals(expected, actual);
        assertReglementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReglementAutoGeneratedPropertiesEquals(Reglement expected, Reglement actual) {
        assertThat(actual)
            .as("Verify Reglement auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReglementUpdatableFieldsEquals(Reglement expected, Reglement actual) {
        assertThat(actual)
            .as("Verify Reglement relevant properties")
            .satisfies(a -> assertThat(a.getIdreg()).as("check idreg").isEqualTo(expected.getIdreg()))
            .satisfies(a -> assertThat(a.getAnnee()).as("check annee").isEqualTo(expected.getAnnee()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getDate())
            )
            .satisfies(a -> assertThat(a.getMontant()).as("check montant").isEqualTo(expected.getMontant()))
            .satisfies(a -> assertThat(a.getMontantlettres()).as("check montantlettres").isEqualTo(expected.getMontantlettres()))
            .satisfies(a -> assertThat(a.getMotif()).as("check motif").isEqualTo(expected.getMotif()))
            .satisfies(a -> assertThat(a.getObserv1()).as("check observ1").isEqualTo(expected.getObserv1()))
            .satisfies(a -> assertThat(a.getObserv2()).as("check observ2").isEqualTo(expected.getObserv2()))
            .satisfies(a -> assertThat(a.getObserv3()).as("check observ3").isEqualTo(expected.getObserv3()))
            .satisfies(a -> assertThat(a.getReste()).as("check reste").isEqualTo(expected.getReste()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReglementUpdatableRelationshipsEquals(Reglement expected, Reglement actual) {
        assertThat(actual)
            .as("Verify Reglement relationships")
            .satisfies(a -> assertThat(a.getLocataire()).as("check locataire").isEqualTo(expected.getLocataire()))
            .satisfies(a -> assertThat(a.getMoi()).as("check moi").isEqualTo(expected.getMoi()))
            .satisfies(a -> assertThat(a.getUtilisateur()).as("check utilisateur").isEqualTo(expected.getUtilisateur()));
    }
}
