package skc.immo.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static skc.immo.domain.AssertUtils.zonedDataTimeSameInstant;

public class ProprietaireAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProprietaireAllPropertiesEquals(Proprietaire expected, Proprietaire actual) {
        assertProprietaireAutoGeneratedPropertiesEquals(expected, actual);
        assertProprietaireAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProprietaireAllUpdatablePropertiesEquals(Proprietaire expected, Proprietaire actual) {
        assertProprietaireUpdatableFieldsEquals(expected, actual);
        assertProprietaireUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProprietaireAutoGeneratedPropertiesEquals(Proprietaire expected, Proprietaire actual) {
        assertThat(actual)
            .as("Verify Proprietaire auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProprietaireUpdatableFieldsEquals(Proprietaire expected, Proprietaire actual) {
        assertThat(actual)
            .as("Verify Proprietaire relevant properties")
            .satisfies(a -> assertThat(a.getIdpro()).as("check idpro").isEqualTo(expected.getIdpro()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getDate())
            )
            .satisfies(a -> assertThat(a.getNom()).as("check nom").isEqualTo(expected.getNom()))
            .satisfies(a -> assertThat(a.getResidence()).as("check residence").isEqualTo(expected.getResidence()))
            .satisfies(a -> assertThat(a.getTel()).as("check tel").isEqualTo(expected.getTel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProprietaireUpdatableRelationshipsEquals(Proprietaire expected, Proprietaire actual) {
        // empty method
    }
}
