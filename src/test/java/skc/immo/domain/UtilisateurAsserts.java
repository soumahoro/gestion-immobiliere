package skc.immo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UtilisateurAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurAllPropertiesEquals(Utilisateur expected, Utilisateur actual) {
        assertUtilisateurAutoGeneratedPropertiesEquals(expected, actual);
        assertUtilisateurAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurAllUpdatablePropertiesEquals(Utilisateur expected, Utilisateur actual) {
        assertUtilisateurUpdatableFieldsEquals(expected, actual);
        assertUtilisateurUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurAutoGeneratedPropertiesEquals(Utilisateur expected, Utilisateur actual) {
        assertThat(actual)
            .as("Verify Utilisateur auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurUpdatableFieldsEquals(Utilisateur expected, Utilisateur actual) {
        assertThat(actual)
            .as("Verify Utilisateur relevant properties")
            .satisfies(a -> assertThat(a.getIduser()).as("check iduser").isEqualTo(expected.getIduser()))
            .satisfies(a -> assertThat(a.getLogin()).as("check login").isEqualTo(expected.getLogin()))
            .satisfies(a -> assertThat(a.getNom()).as("check nom").isEqualTo(expected.getNom()))
            .satisfies(a -> assertThat(a.getPrenom()).as("check prenom").isEqualTo(expected.getPrenom()))
            .satisfies(a -> assertThat(a.getDateDeNaissance()).as("check dateDeNaissance").isEqualTo(expected.getDateDeNaissance()))
            .satisfies(a -> assertThat(a.getMotdepasse()).as("check motdepasse").isEqualTo(expected.getMotdepasse()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPhoto()).as("check photo").isEqualTo(expected.getPhoto()))
            .satisfies(a -> assertThat(a.getPwd()).as("check pwd").isEqualTo(expected.getPwd()))
            .satisfies(a -> assertThat(a.getRole()).as("check role").isEqualTo(expected.getRole()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurUpdatableRelationshipsEquals(Utilisateur expected, Utilisateur actual) {
        // empty method
    }
}
